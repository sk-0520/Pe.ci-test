on:
  workflow_call:
    inputs:
      APPLICATION_ARCHIVE:
        required: true
        type: string
      PLUGINS_ARCHIVE:
        required: true
        type: string
      IS_PRODUCT:
        required: true
        type: boolean
      PE_RELEASE_ARCHIVE_BASE_URL:
        required: true
        type: string
      PE_RELEASE_NOTE_BASE_URL:
        required: true
        type: string
      OS_WINDOWS:
        type: string
        default: windows-2022


env:
  MINIMUM_VERSION: 0.91.0
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
  PLATFORMS: x86,x64
  DOTNET_VERSION: 8.0.x


jobs:
  lint-powershell:
    name: Lint PowerShell

    strategy:
      matrix:
        OS:
          - windows-latest
          - ubuntu-latest

    runs-on: ${{ matrix.OS }}

    steps:
      - name: <Checkout> Repository
        uses: actions/checkout@v3

      - name: <Lint> PowerShell
        shell: pwsh
        run: Invoke-ScriptAnalyzer -Path ./ -Recurse -Settings PSScriptAnalyzerSettings.psd1 -EnableExit
        # uses: microsoft/psscriptanalyzer-action@v1.0
        # with:
        #  path: ./
        #  recurse: true
        #  settings: ./PSScriptAnalyzerSettings.psd1
        #  output: results.sarif


  help:
    name: Help
    runs-on: ubuntu-latest

    steps:
      - name: <Checkout> Repository
        uses: actions/checkout@v3

      - name: <Add> Node/NPM
        uses: actions/setup-node@v3
        with:
          node-version-file: ./.node-version
          cache: npm

      - name: <Install> NPM
        shell: bash
        run: npm ci

      - name: <Test> Script
        shell: bash
        run: npm test

      - name: <Build> Help
        shell: bash
        run: npm run help-ci

      - name: <Artifact> Help
        uses: actions/upload-artifact@v3
        with:
          name: Help
          path: Output/help

  plugin-template:
    name: Plugin Template
    needs:
      - help
    env:
      EXPAND_DIR: plugin-template
      PROJECT_DIR: \test-plugin
      PROJECT_NAME: Plugin.Template

    strategy:
      matrix:
        PLATFORM:
          - x86
          - x64

    runs-on: ${{ inputs.OS_WINDOWS }}

    steps:
      - name: <Setting> Job
        shell: pwsh
        run: |
          git config --global core.autocrlf false
          git config --global user.email "${{ github.job }}@example.com"
          git config --global user.name "${{ github.job }}"

      - name: <Checkout> Repository
        uses: actions/checkout@v3

      - name: <Setup> .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: <Add> msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: ${{ matrix.PLATFORM }}

      - name: <Download> Help
        uses: actions/download-artifact@v3
        with:
          name: Help
          path: artifacts/help

      - name: <Expand> Plugin Template
        shell: pwsh
        run: Expand-Archive -Verbose -Path artifacts/help/archives/plugin-template.zip -DestinationPath ${{ env.EXPAND_DIR }}

      - name: <Create> Plugin Template
        shell: pwsh
        run: .\${{ env.EXPAND_DIR }}\create-project.ps1 -Verbose -InformationAction Continue -ProjectDirectory ${{ env.PROJECT_DIR }} -PluginName ${{ env.PROJECT_NAME }} -PluginId ([Guid]::Empty) -DefaultNamespace ${{ env.PROJECT_NAME }}  -AppTargetBranch '${{ github.ref_name }}'

      - name: <Build> Plugin Template
        shell: pwsh
        run: |
          Set-Location ${{ env.PROJECT_DIR }}
          .\FullBuild.ps1 -Verbose -InformationAction Continue -Platforms ${{ matrix.PLATFORM }}

      - name: <Test> Plugin Template
        # x86 が動かない問題, あとで対処
        #if: matrix.PLATFORM == 'x64'
        shell: pwsh
        run: |
          Set-Location ${{ env.PROJECT_DIR }}
          .\FullTest.ps1 -Verbose -InformationAction Continue -Platforms ${{ matrix.PLATFORM }}

      - name: <Archive> Plugin Template
        shell: bash
        run: ./Build/archive-compress.sh "plugin-template.tar" "${{ env.PROJECT_DIR }}"

      - name: <Artifact> Plugin Template
        uses: actions/upload-artifact@v3
        with:
          name: template-plugin-${{ matrix.PLATFORM }}
          path: plugin-template.tar


  history:
    name: Release Note
    runs-on: ubuntu-latest

    steps:
      - name: <Checkout> Repository
        uses: actions/checkout@v3
        # with:
        #   fetch-depth: 0

      - name: <Add> Node/NPM
        uses: actions/setup-node@v3
        with:
          node-version-file: ./.node-version
          cache: npm

      - name: <Install> NPM
        shell: bash
        run: npm ci

      - name: <Generate> Release Note
        shell: pwsh
        run: |
          $productMode = [System.Convert]::ToBoolean('${{ inputs.IS_PRODUCT }}')
          $ignoreEmpty = !$productMode
          if( '${{ github.ref }}' -eq 'refs/heads/ci-test' ) {
            $ignoreEmpty = $true
          }
          .\Build\generate-release-note.ps1 -InformationAction Continue -OutputDirectory history -IgnoreEmpty:$ignoreEmpty

      - name: <Artifact> Release Note
        uses: actions/upload-artifact@v3
        with:
          name: History
          path: history/*.html


  build-tools:
    name: Build BuildTools
    runs-on: ${{ inputs.OS_WINDOWS }}

    steps:
      - name: <Checkout> Repository
        uses: actions/checkout@v3

      - name: <Setup> .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: <Add> msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: x64

      - name: <Cache> Nuget
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.nuget/packages
          key: nuget-${{ github.job }}-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ github.job }}-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}

      - name: <Build> BuildTools
        shell: pwsh
        run: .\Build\make-buildtools.ps1 -InformationAction Continue

      - name: <Artifact> BuildTools
        uses: actions/upload-artifact@v3
        with:
          name: BuildTools
          path: Output\tools

  build-tools-sql:
    name: "BuildTools: SQL"
    needs:
      - build-tools
    runs-on: ${{ inputs.OS_WINDOWS }}

    steps:
      - name: <Checkout> Repository
        uses: actions/checkout@v3

      - name: <Setup> .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: <Download> BuildTools
        uses: actions/download-artifact@v3
        with:
          name: BuildTools
          path: artifacts/buildtools

      - name: <Pack> SQL
        shell: pwsh
        run: .\Build\buildtools-sql.ps1 -InformationAction Continue -BuildToolsSqlPack "artifacts\buildtools\SqlPack.exe" -OutputFile sql.sqlite3

      - name: <Artifact> SQL
        uses: actions/upload-artifact@v3
        with:
          name: SQL
          path: sql.sqlite3


  build-boot:
    name: Build Boot
    env:
      MODULE: boot
    runs-on: ${{ inputs.OS_WINDOWS }}

    strategy:
      matrix:
        PLATFORM:
          - x86
          - x64

    steps:
      - name: <Checkout> Repository
        uses: actions/checkout@v3

      - name: <Add> msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: ${{ matrix.PLATFORM }}

      - name: <Rewrite> Module
        shell: pwsh
        run: |
          $buildType = $productMode ? '': 'BETA'
          .\Build\rewrite-module.ps1 -InformationAction Continue -Module ${{ env.MODULE }} -ProductMode -BuildType $buildType -Revision ${{ github.sha }}

      - name: <Build> Module
        shell: pwsh
        run: |
          $buildType = $productMode ? '': 'BETA'
          .\Build\build-module.ps1 -InformationAction Continue -Module ${{ env.MODULE }} -ProductMode -BuildType $buildType -Platform ${{ matrix.PLATFORM }}

      - name: <Artifact> Module
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.MODULE }}-${{ matrix.PLATFORM }}
          path: Output\Release\${{ matrix.PLATFORM }}\Pe\*

  test-boot:
    name: Test Boot
    env:
      MODULE: boot
    runs-on: ${{ inputs.OS_WINDOWS }}

    strategy:
      matrix:
        PLATFORM:
          - x86
          - x64
        CONFIGURATION:
          - Release
          - CI_TEST

    steps:
      - name: <Checkout> Repository
        uses: actions/checkout@v3

      - name: <Add> msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: ${{ matrix.PLATFORM }}

      - name: <Add> VSTest
        uses: darenm/Setup-VSTest@v1.2

      - name: <Rewrite> Module
        shell: pwsh
        run: |
          $buildType = $productMode ? '': 'BETA'
          .\Build\rewrite-module.ps1 -InformationAction Continue -Module ${{ env.MODULE }} -ProductMode -BuildType $buildType -Revision ${{ github.sha }}

      - name: <Setup> Module
        shell: pwsh
        run: .\Build\setup-test-module.ps1 -InformationAction Continue -Service github -Module ${{ env.MODULE }}

      - name: <Build> Module
        shell: pwsh
        run: |
          $productMode = [System.Convert]::ToBoolean('${{ inputs.IS_PRODUCT }}')
          $buildType = $productMode ? '': 'BETA'
          $isTest = $false
          if( '${{ matrix.CONFIGURATION }}' -eq 'CI_TEST') {
            $isTest = $true
          }
          .\Build\build-module.ps1 -InformationAction Continue -Module ${{ env.MODULE }} -ProductMode -BuildType $buildType -Platform ${{ matrix.PLATFORM }} -Test:$isTest

      - name: <Test> Module
        shell: pwsh
        run: .\Build\test-module.ps1 -InformationAction Continue -Module ${{ env.MODULE }} -Platform ${{ matrix.PLATFORM }} -Configuration ${{ matrix.CONFIGURATION }}


  build-main:
    name: Build Main
    env:
      MODULE: main
    runs-on: ${{ inputs.OS_WINDOWS }}

    strategy:
      matrix:
        PLATFORM:
          - x86
          - x64

    steps:
      - name: <Checkout> Repository
        uses: actions/checkout@v3

      - name: <Setup> .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: <Add> msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: ${{ matrix.PLATFORM }}

      - name: <Cache> Nuget
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.nuget/packages
          key: nuget-${{ github.job }}-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ github.job }}-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}

      - name: <Rewrite> Module
        shell: pwsh
        run: |
          $productMode = [System.Convert]::ToBoolean('${{ inputs.IS_PRODUCT }}')
          $buildType = $productMode ? '': 'BETA'
          .\Build\rewrite-module.ps1 -InformationAction Continue -Module ${{ env.MODULE }} -ProductMode -BuildType $buildType -Revision ${{ github.sha }}

      - name: <Build> Module
        shell: pwsh
        run: |
          $productMode = [System.Convert]::ToBoolean('${{ inputs.IS_PRODUCT }}')
          $buildType = $productMode ? '': 'BETA'
          .\Build\build-module.ps1 -InformationAction Continue -Module ${{ env.MODULE }} -ProductMode -BuildType $buildType -Platform ${{ matrix.PLATFORM }}

      - name: <Archive> Application
        shell: bash
        run: ./Build/archive-compress.sh "bin.tar" "Output/Release/${{ matrix.PLATFORM }}/Pe/bin"

      - name: <Artifact> Module
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.MODULE }}-bin-${{ matrix.PLATFORM }}
          path: bin.tar

  test-main:
    name: Test Main
    env:
      MODULE: main
    runs-on: ${{ inputs.OS_WINDOWS }}

    strategy:
      matrix:
        PLATFORM:
          - x86
          - x64

    steps:
      - name: <Checkout> Repository
        uses: actions/checkout@v3

      - name: <Setup> .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: <Add> msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: ${{ matrix.PLATFORM }}

      - name: <Rewrite> Module
        shell: pwsh
        run: .\Build\rewrite-module.ps1 -InformationAction Continue -Module ${{ env.MODULE }} -ProductMode -BuildType BETA -Revision ${{ github.sha }}

      - name: <Setup> Module
        shell: pwsh
        run: .\Build\setup-test-module.ps1 -InformationAction Continue -Service github -Module ${{ env.MODULE }}

      - name: <Test> Module
        shell: pwsh
        run: .\Build\test-module.ps1 -InformationAction Continue -Module ${{ env.MODULE }} -ProductMode -BuildType BETA -Platform ${{ matrix.PLATFORM }} -Configuration Release -Logger GitHubActions

  reconstitution-application:
    name: Reconstitution Application
    needs:
      - help
      - build-tools-sql
      - build-boot
      - build-main
    runs-on: ${{ inputs.OS_WINDOWS }}

    strategy:
      matrix:
        PLATFORM:
          - x86
          - x64

    steps:
      - name: <Checkout> Repository
        uses: actions/checkout@v3

      # - name: <Setup> .NET ${{ env.DOTNET_VERSION }}
      #   uses: actions/setup-dotnet@v4
      #   with:
      #     dotnet-version: ${{ env.DOTNET_VERSION }}
      #
      # - name: <Download> BuildTools
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: BuildTools
      #     path: artifacts/buildtools

      - name: <Download> SQL
        uses: actions/download-artifact@v3
        with:
          name: SQL
          path: artifacts/sql

      - name: <Download> Help
        uses: actions/download-artifact@v3
        with:
          name: Help
          path: artifacts/help

      - name: <Download> Boot
        uses: actions/download-artifact@v3
        with:
          name: boot-${{ matrix.PLATFORM }}
          path: artifacts/boot

      - name: <Download> Main
        uses: actions/download-artifact@v3
        with:
          name: main-bin-${{ matrix.PLATFORM }}
          path: main-bin.tar

      - name: <Expand> Main
        shell: bash
        run: ./Build/archive-expand.sh "artifacts/main-bin" "main-bin.tar/bin.tar"

      - name: <Reconstitution> Application
        shell: pwsh
        run: |
          $productMode = [System.Convert]::ToBoolean('${{ inputs.IS_PRODUCT }}')
          $buildType = $productMode ? '': 'BETA'
          ./Build/reconstitute-application.ps1 -InformationAction Continue -Archive 7z -Platform ${{ matrix.PLATFORM }} -ProductMode:$productMode -BuildType $buildType -InputDirectory artifacts  -OutputDirectory Output

      - name: <Cleanup> Application
        shell: pwsh
        run: |
          $productMode = [System.Convert]::ToBoolean('${{ inputs.IS_PRODUCT }}')
          .\Build\cleanup-module.ps1 -InformationAction Continue -AssemblyDirectory 'Output' -ProductMode:$productMode

      - name: <Compress> Application
        shell: pwsh
        run: .\Build\compress-module.ps1 -InformationAction Continue -TargetDirectory 'Output' -OutputFileBaseName "Pe_${{ matrix.PLATFORM }}" -Archive ${{ inputs.APPLICATION_ARCHIVE }}

      - name: <Artifact> Application
        uses: actions/upload-artifact@v3
        with:
          name: Pe_${{ matrix.PLATFORM }}
          path: Pe_${{ matrix.PLATFORM }}.${{ inputs.APPLICATION_ARCHIVE }}

  information-application:
    name: Information Application
    needs:
      - reconstitution-application
    runs-on: ubuntu-latest

    steps:
      - name: <Checkout> Repository
        uses: actions/checkout@v3

      - name: <Download> Application x86
        uses: actions/download-artifact@v3
        with:
          name: Pe_x86
          path: artifacts/Pe

      - name: <Download> Application x64
        uses: actions/download-artifact@v3
        with:
          name: Pe_x64
          path: artifacts/Pe

      - name: <🌳> 🌲
        shell: pwsh
        run:  Get-ChildItem artifacts -R | Select-Object FullName

      - name: <Generate> Update Information
        shell: pwsh
        run: .\Build\generate-update-information.ps1 -InformationAction Continue -Revision '${{ github.sha }}' -MinimumVersion ${{ env.MINIMUM_VERSION }} -ArchiveBaseUrl ${{ inputs.PE_RELEASE_ARCHIVE_BASE_URL }} -NoteBaseUrl ${{ inputs.PE_RELEASE_NOTE_BASE_URL }} -OutputDirectory Output -Module 'application' -Archive ${{ inputs.APPLICATION_ARCHIVE }} -ArtifactDirectory (Join-Path -Path 'artifacts' -ChildPath 'Pe') -Platforms ${{ env.PLATFORMS }}

      - name: <Artifact> Update Information
        uses: actions/upload-artifact@v3
        with:
          name: Information_Pe
          path: |
            Output/update.json
            Output/*.html


  build-plugins:
    name: Build Plugins
    env:
      MODULE: plugins
    runs-on: ${{ inputs.OS_WINDOWS }}

    strategy:
      matrix:
        PLATFORM:
          - x86
          - x64

    steps:
      - name: <Checkout> Repository
        uses: actions/checkout@v3

      - name: <Setup> .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: <Add> msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: ${{ matrix.PLATFORM }}

      - name: <Cache> Nuget
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.nuget/packages
          key: nuget-${{ github.job }}-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ github.job }}-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}

      - name: <Rewrite> Module
        shell: pwsh
        run: |
          $productMode = [System.Convert]::ToBoolean('${{ inputs.IS_PRODUCT }}')
          $buildType = $productMode ? '': 'BETA'
          .\Build\rewrite-module.ps1 -InformationAction Continue -Module ${{ env.MODULE }} -ProductMode -BuildType $buildType -Revision ${{ github.sha }}

      - name: <Build> Module
        shell: pwsh
        run: |
          $productMode = [System.Convert]::ToBoolean('${{ inputs.IS_PRODUCT }}')
          $buildType = $productMode ? '': 'BETA'
          .\Build\build-module.ps1 -InformationAction Continue -Module ${{ env.MODULE }} -ProductMode -BuildType $buildType -Platform ${{ matrix.PLATFORM }}

      - name: <Artifact> Module
        uses: actions/upload-artifact@v3
        with:
          name: plugins-${{ matrix.PLATFORM }}
          path: Output\Release\${{ matrix.PLATFORM }}\Plugins

  test-plugins:
    name: Test Plugins
    env:
      MODULE: plugins
    runs-on: ${{ inputs.OS_WINDOWS }}

    strategy:
      matrix:
        PLATFORM:
          - x86
          - x64

    steps:
      - name: <Checkout> Repository
        uses: actions/checkout@v3

      - name: <Setup> .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: <Add> msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: ${{ matrix.PLATFORM }}

      - name: <Rewrite> Module
        shell: pwsh
        run: .\Build\rewrite-module.ps1 -InformationAction Continue -Module ${{ env.MODULE }} -ProductMode -BuildType BETA -Revision ${{ github.sha }}

      - name: <Setup> Module
        shell: pwsh
        run: .\Build\setup-test-module.ps1 -InformationAction Continue -Service github -Module ${{ env.MODULE }}

      - name: <Test> Module
        shell: pwsh
        run: .\Build\test-module.ps1 -InformationAction Continue -Module ${{ env.MODULE }} -ProductMode -BuildType BETA -Platform ${{ matrix.PLATFORM }} -Configuration Release -Logger GitHubActions

  reconstitution-plugins:
    name: Reconstitution Plugins
    needs:
      - build-plugins
    runs-on: ${{ inputs.OS_WINDOWS }}

    strategy:
      matrix:
        PLATFORM:
          - x86
          - x64

    steps:
      - name: <Checkout> Repository
        uses: actions/checkout@v3

      - name: <Download> Plugins
        uses: actions/download-artifact@v3
        with:
          name: plugins-${{ matrix.PLATFORM }}
          path: artifacts/plugins

      - name: <Cleanup> Plugins
        shell: pwsh
        run: |
          $productMode = [System.Convert]::ToBoolean('${{ inputs.IS_PRODUCT }}')
          $dirs = Get-ChildItem -Path (Join-Path -Path 'artifacts' -ChildPath 'plugins')
          foreach($dir in $dirs) {
            .\Build\cleanup-module.ps1 -InformationAction Continue -AssemblyDirectory $dir.FullName -ProductMode:$productMode
          }

      - name: <Compress> Plugins
        shell: pwsh
        run: |
          $dirs = Get-ChildItem -Path (Join-Path -Path 'artifacts' -ChildPath 'plugins')
          foreach($dir in $dirs) {
            .\Build\compress-module.ps1 -InformationAction Continue -TargetDirectory $dir.FullName -OutputFileBaseName "$($dir.Name)_${{ matrix.PLATFORM }}" -Archive ${{ inputs.PLUGINS_ARCHIVE }}
          }

      - name: <Artifact> Plugins
        uses: actions/upload-artifact@v3
        with:
          name: Pe.Plugins.Reference_${{ matrix.PLATFORM }}
          path: ./*.${{ inputs.PLUGINS_ARCHIVE }}

  information-plugins:
    name: Information Plugins
    runs-on: ubuntu-latest
    needs:
      - reconstitution-plugins

    steps:
      - name: <Checkout> Repository
        uses: actions/checkout@v3

      - name: <Download> Plugins x86
        uses: actions/download-artifact@v3
        with:
          name: Pe.Plugins.Reference_x86
          path: artifacts/Pe.Plugins.Reference

      - name: <Download> Plugins x64
        uses: actions/download-artifact@v3
        with:
          name: Pe.Plugins.Reference_x64
          path: artifacts/Pe.Plugins.Reference

      - name: <🌳> 🌲
        shell: pwsh
        run:  Get-ChildItem artifacts -R | Select-Object Name

      - name: <Generate> Update Information
        shell: pwsh
        run: .\Build\generate-update-information.ps1 -InformationAction Continue -Revision '${{ github.sha }}' -MinimumVersion ${{ env.MINIMUM_VERSION }} -ArchiveBaseUrl ${{ inputs.PE_RELEASE_ARCHIVE_BASE_URL }} -NoteBaseUrl ${{ inputs.PE_RELEASE_NOTE_BASE_URL }} -OutputDirectory Output -Module 'plugins' -Archive ${{ inputs.PLUGINS_ARCHIVE }} -ArtifactDirectory (Join-Path -Path 'artifacts' -ChildPath 'Pe.Plugins.Reference') -Platforms ${{ env.PLATFORMS }}

      - name: <Artifact> Update Information
        uses: actions/upload-artifact@v3
        with:
          name: Information_Pe.Plugins.Reference
          path: |
            Output/update-*.json
            Output/*.html


  test-library:
    name: Test .NET Library

    strategy:
      matrix:
        OS:
          - windows-2019
          - ubuntu-22.04
          - ubuntu-20.04
          - macos-12
          - macos-11
        TARGET:
          - Pe.Standard.Base.Test
          - Pe.Standard.Database.Test
          - Pe.Standard.DependencyInjection.Test

    runs-on: ${{ matrix.OS }}

    steps:
      - name: <Checkout> Repository
        uses: actions/checkout@v3

      - name: <Setup> .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # - name: <Test> Add Logger ${{ matrix.TARGET }}
      #   shell: bash
      #   run: |
      #     cd Source/Pe/${{ matrix.TARGET }}
      #     nuget install GitHubActionsTestLogger

      - name: <Test> Run ${{ matrix.TARGET }}
        shell: bash
        run: |
          cd Source/Pe/${{ matrix.TARGET }}
          dotnet test

  st-powershell:
    name: System Test PowerShell
    env:
      UPDATE_DESTINATION: \dest
    runs-on: windows-latest
    needs:
      - lint-powershell

    steps:
      - name: <Checkout> Repository
        uses: actions/checkout@v3

      - name: <Test> Update
        shell: pwsh
        run: .\Source\PowerShell.Test\ST\update-application.test.ps1 -Source (Get-Location).Path -Destination ${{ env.UPDATE_DESTINATION }} -Command ([Environment]::ExpandEnvironmentVariables('%SystemRoot%\System32\winver.exe'))

      - name: <Artifact> Update:Error
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.job }}-Update.log
          path: ${{ env.UPDATE_DESTINATION }}.log


